h1. Clearance

Simple, complete Ruby web app authentication. 

"We have clearance, Clarence.":http://www.youtube.com/v/mNRXJEE3Nz8

h2. Gem installation (Rails 2.1+)

In config/environments/test.rb:

    config.gem 'mocha'
    config.gem 'thoughtbot-shoulda',
      :lib    => 'shoulda',
      :source => "http://gems.github.com"
    config.gem 'thoughtbot-factory_girl',
      :lib    => 'factory_girl',
      :source => "http://gems.github.com"

In config/environment.rb:

    config.gem "thoughtbot-clearance", :lib => 'clearance', :source => 'http://gems.github.com'

Then:

    rake gems:install
    rake gems:unpack

h2. Generator

In a greenfield application, just run the generator:

    script/generate clearance

This will create:

    app/controllers/confirmations_controller.rb
    app/controllers/passwords_controller.rb
    app/controllers/sessions_controller.rb
    app/controllers/users_controller.rb
    app/models/user.rb
    app/models/user_mailer.rb
    app/views/passwords/edit.html.erb
    app/views/passwords/new.html.erb
    app/views/sessions/new.html.erb
    app/views/user_mailer/change_password.html.erb
    app/views/user_mailer/confirmation.html.erb
    app/views/users/_form.html.erb
    app/views/users/edit.html.erb
    app/views/users/new.html.erb
    test/functional/confirmations_controller_test.rb
    test/functional/passwords_controller_test.rb
    test/functional/sessions_controller_test.rb
    test/functional/users_controller_test.rb
    test/unit/clearance_mailer_test.rb
    test/unit/user_test.rb
    
And it will add a Clearance module to the application.rb:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
    end

For any other file(s) that you already have and don't want to override, add the corresponding Clearance module. They are namespaced exactly like the directory structure of a Rails app: 

    app/models/user.rb already exists.
    include Clearance::App::Models::User
    
The generator will also create a migration to add a "users" table and run it. If the table already exists in the database the migration will just add fields and indexes that are missing and required by Clearance. If the migration fails, the generator will revert all changes back.

Finally it will add these routes to your routes.rb:

    map.resources :users, :has_one => [:password, :confirmation]
    map.resource :session
    map.resources :passwords
    
Please note that Clearance depends on root_url, so please make sure that it is defined in your config/routes.rb:

    map.root :controller => 'my_home_controller'
    
h2. Environments

There's a couple of things you need to add to your environments files.
In config/environments/test.rb and config/environments/development.rb:

    HOST = "localhost"

In config/environment.rb:

    DO_NOT_REPLY = "donotreply@example.com"
    PROJECT_NAME = "my_app_name"    

h2. Tests

The tests use "Shoulda":http://thoughtbot.com/projects/shoulda >= 2.0.4 and "Factory Girl":http://thoughtbot.com/projects/factory_girl. You need to add the Clearance module to your test/test_helper.rb:

    class Test::Unit::TestCase
      self.use_transactional_fixtures = true
      self.use_instantiated_fixtures  = false
      include Clearance::Test::TestHelper
    end

The generator will create a user factory in test/factories/clearance_user.rb unless
you have it defined somewhere else.

h2. Usage

Clearance provides all the basics you need to get started with authentication. 

Users can sign up (UsersController) using an email address and a password (User model) and get an email with a confirmation link (ClearanceMailer) to finish the registration (ConfirmationController).

Registered users can sign in and out (SessionsController) and request an email with a link to change their password if they forget it (PasswordsController). 
    
To protect your controllers with authentication add:

    class ProtectedController < ApplicationController
      before_filter :authenticate

The filter will ensure that only authenticated users can access the controller. If someone who's not logged in tries to access a protected action, the URL is stored in the session, the user is redirected to log in page and after successful authentication will be be redirected back to that URL.

If you want to specify where to redirect a user (say you want to have a login box on every page and redirect the user to the same page) after he signs in, you can add a "return_to" parameter to the request (thanks to "Phillippe":http://www.sivarg.com/2009/01/clearance-coming-from-where-your-were.html for the tip):

    <% form_for :session, :url => session_path(:return_to => request.request_uri) do |form| %> 
    ...

h2. Hooks and Tweaks

Clearance provides 2 methods that can be used in controllers and views to check if current user is authenticated and get the actual user: logged_in? and current_user:
    
    <% if logged_in? -%>
      Hello, <%= current_user.name %>!
    <% else -%>
      Please <%= link_to 'Log in', new_session_path %>
    <% end -%>
    
URLs that used by Clearance controllers are customizable. If you want to redirect a user to a specific page after signing in you need to override "url_after_create" method in the SessionsController:

    class SessionsController < ApplicationController
      include Clearance::App::Controllers::SessionsController
      
      private
      
        def url_after_create
          new_blog_post_path
        end
    end

There are similar methods in other controllers as well:

    UsersController#url_after_create (sign up)
    ConfirmationsController#url_after_confirmation
    SessionsController#url_after_create (sign in)
    SessionsController#url_after_destroy (sign out)
    PasswordsController#url_after_create (pasword reset request)

If you need to do something special when a user logs in, Clearance allows that
too. Just override log_user_in method and call login inside it:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
      
      private
        
        def log_user_in(user)
          # store current time to display "last logged in at" message
          user.update_attribute(:last_logged_in_at, Time.now)
          login(user)
        end
    end 

h2. Authors

* thoughtbot, inc.
* Dan Croak
* Jason Morrison
* Mike Burns
* Josh Nichols
* Mike Breen
