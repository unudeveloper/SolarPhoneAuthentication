h1. Clearance

Simple, complete Ruby web app authentication. 

"We have clearance, Clarence.":http://www.youtube.com/v/mNRXJEE3Nz8

h2. Gem installation (Rails 2.1+)

In config/environments/test.rb:

    config.gem 'mocha'
    config.gem 'thoughtbot-shoulda',
      :lib    => 'shoulda',
      :source => "http://gems.github.com"
    config.gem 'thoughtbot-factory_girl',
      :lib    => 'factory_girl',
      :source => "http://gems.github.com"

In config/environment.rb:

    config.gem "thoughtbot-clearance", :lib => 'clearance', :source => 'http://gems.github.com'

Then:

    rake gems:install
    rake gems:unpack

h2. Generator

In a greenfield application, just run the generator:

    script/generate clearance

This will create:

    app/controllers/confirmations_controller.rb
    app/controllers/passwords_controller.rb
    app/controllers/sessions_controller.rb
    app/controllers/users_controller.rb
    app/models/user.rb
    app/models/user_mailer.rb
    app/views/confirmations/new.html.erb
    app/views/passwords/edit.html.erb
    app/views/passwords/new.html.erb
    app/views/sessions/new.html.erb
    app/views/user_mailer/change_password.html.erb
    app/views/user_mailer/confirmation.html.erb
    app/views/users/_form.html.erb
    app/views/users/edit.html.erb
    app/views/users/new.html.erb
    test/functional/confirmations_controller_test.rb
    test/functional/passwords_controller_test.rb
    test/functional/sessions_controller_test.rb
    test/functional/users_controller_test.rb
    test/unit/user_mailer_test.rb
    test/unit/user_test.rb

Add the corresponding Clearance module for any file(s) you don't want to override. They are namespaced exactly like the directory structure of a Rails app: 

    app/models/user.rb already exists.
    include Clearance::App::Models::User

h2. Tests

The tests use "Shoulda":http://thoughtbot.com/projects/shoulda >= 2.0.4 and "Factory Girl":http://thoughtbot.com/projects/factory_girl. You should create a User Factory:

    Factory.sequence :email do |n|
      "user#{n}@example.com"
    end

    Factory.define :user do |user|
      user.email { Factory.next :email }
      user.password "password"
      user.password_confirmation "password"
    end

In test/test_helper.rb: 

    class Test::Unit::TestCase
      self.use_transactional_fixtures = true
      self.use_instantiated_fixtures  = false
      include Clearance::Test::TestHelper
    end

h2. Controllers

In app/controllers/application_controller.rb:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
    end

h2. Migration

Your users table needs a few columns.

    create_table(:users) do |t|
      t.string :email
      t.string :crypted_password, :limit => 40
      t.string :salt, :limit => 40
      t.string :remember_token
      t.datetime :remember_token_expires_at
      t.boolean :confirmed, :default => false, :null => false
    end

    add_index :users, [:email, :crypted_password]
    add_index :users, [:id, :salt]
    add_index :users, :email
    add_index :users, :remember_token

h2. Routes

    map.resources :users
    map.resource :session
    map.resources :users, :has_one => :password
    map.resources :users, :has_one => :confirmation
    map.resources :passwords
    map.root :controller => 'sessions', :action => 'new'

h2. Environments

In config/environments/test.rb and config/environments/development.rb:

    HOST = "localhost"

In config/environment.rb:

    DO_NOT_REPLY = "donotreply@example.com"
    PROJECT_NAME = "my_app_name"
    
h2. Usage

To protect your controllers with authentication add:

    class ProtectedController < ApplicationController
      before_filter :authenticate

The filter will ensure that only authenticated users can access the controller.
If someone who's not logged in tries to access a protected action, the URL 
is stored in the session, the user is redirected to log in page and after 
successful authentication will be be redirected back to that URL.

Clearance provides 2 methods that can be used in controllers and views to 
check if current user is authenticated and get the actual user: logged_in? and
current_user:
    
    <% if logged_in? -%>
      Hello, <%= current_user.name %>!
    <% else -%>
      Please <%= link_to 'Log in', new_session_path %>
    <% end -%>
    
h2. Tweaks

Clearance is flexible. If you want to use a model other than User for 
authentication you can specify your model by overriding user_model metod in
ApplicationController:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
      
      private
        
        def user_model
          Person
        end
    end
    
The same works for the mailer:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
      
      private
        
        def user_mailer
          MyMailer
        end
    end

If you need to do something special when a user logs in, Clearance allows that
too. Just override log_user_in method and call login inside it:

    class ApplicationController < ActionController::Base
      include Clearance::App::Controllers::ApplicationController
      
      private
        
        def log_user_in(user)
          # store current time to display "last logged in at" message
          user.update_attribute(:last_logged_in_at, Time.now)
          login(user)
        end
    end 

h2. Authors

* thoughtbot, inc.
* Dan Croak
* Jason Morrison
* Mike Burns
* Josh Nichols
* Mike Breen
